// Code generated by protoc-gen-go. DO NOT EDIT.
// source: profession/profession.proto

/*
Package profession is a generated protocol buffer package.

It is generated from these files:
	profession/profession.proto

It has these top-level messages:
	Profession
	ProfessionRequest
	ProfessionDeleteResponse
*/
package profession

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import service "github.com/atomsystemsteam/harryprotomodels/model/service"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Profession struct {
	Id        int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image     string                     `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	IsActive  bool                       `protobuf:"varint,4,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt" json:"UpdatedAt,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
	DeletedAt *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=DeletedAt" json:"DeletedAt,omitempty"`
	Services  []*service.Service         `protobuf:"bytes,8,rep,name=services" json:"services,omitempty"`
}

func (m *Profession) Reset()                    { *m = Profession{} }
func (m *Profession) String() string            { return proto.CompactTextString(m) }
func (*Profession) ProtoMessage()               {}
func (*Profession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Profession) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Profession) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profession) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Profession) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Profession) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Profession) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Profession) GetDeletedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *Profession) GetServices() []*service.Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type ProfessionRequest struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ProfessionRequest) Reset()                    { *m = ProfessionRequest{} }
func (m *ProfessionRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfessionRequest) ProtoMessage()               {}
func (*ProfessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProfessionRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ProfessionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProfessionDeleteResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Code   int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
}

func (m *ProfessionDeleteResponse) Reset()                    { *m = ProfessionDeleteResponse{} }
func (m *ProfessionDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*ProfessionDeleteResponse) ProtoMessage()               {}
func (*ProfessionDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProfessionDeleteResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ProfessionDeleteResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*Profession)(nil), "profession.Profession")
	proto.RegisterType((*ProfessionRequest)(nil), "profession.professionRequest")
	proto.RegisterType((*ProfessionDeleteResponse)(nil), "profession.professionDeleteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HarryProfessionService service

type HarryProfessionServiceClient interface {
	GetProfession(ctx context.Context, in *ProfessionRequest, opts ...grpc.CallOption) (*Profession, error)
	GetAllProfession(ctx context.Context, in *ProfessionRequest, opts ...grpc.CallOption) (HarryProfessionService_GetAllProfessionClient, error)
	CreateProfession(ctx context.Context, in *Profession, opts ...grpc.CallOption) (*Profession, error)
	UpdateProfession(ctx context.Context, in *Profession, opts ...grpc.CallOption) (*Profession, error)
	DeleteProfession(ctx context.Context, in *Profession, opts ...grpc.CallOption) (*ProfessionDeleteResponse, error)
}

type harryProfessionServiceClient struct {
	cc *grpc.ClientConn
}

func NewHarryProfessionServiceClient(cc *grpc.ClientConn) HarryProfessionServiceClient {
	return &harryProfessionServiceClient{cc}
}

func (c *harryProfessionServiceClient) GetProfession(ctx context.Context, in *ProfessionRequest, opts ...grpc.CallOption) (*Profession, error) {
	out := new(Profession)
	err := grpc.Invoke(ctx, "/profession.HarryProfessionService/GetProfession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryProfessionServiceClient) GetAllProfession(ctx context.Context, in *ProfessionRequest, opts ...grpc.CallOption) (HarryProfessionService_GetAllProfessionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HarryProfessionService_serviceDesc.Streams[0], c.cc, "/profession.HarryProfessionService/GetAllProfession", opts...)
	if err != nil {
		return nil, err
	}
	x := &harryProfessionServiceGetAllProfessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HarryProfessionService_GetAllProfessionClient interface {
	Recv() (*Profession, error)
	grpc.ClientStream
}

type harryProfessionServiceGetAllProfessionClient struct {
	grpc.ClientStream
}

func (x *harryProfessionServiceGetAllProfessionClient) Recv() (*Profession, error) {
	m := new(Profession)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *harryProfessionServiceClient) CreateProfession(ctx context.Context, in *Profession, opts ...grpc.CallOption) (*Profession, error) {
	out := new(Profession)
	err := grpc.Invoke(ctx, "/profession.HarryProfessionService/CreateProfession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryProfessionServiceClient) UpdateProfession(ctx context.Context, in *Profession, opts ...grpc.CallOption) (*Profession, error) {
	out := new(Profession)
	err := grpc.Invoke(ctx, "/profession.HarryProfessionService/UpdateProfession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryProfessionServiceClient) DeleteProfession(ctx context.Context, in *Profession, opts ...grpc.CallOption) (*ProfessionDeleteResponse, error) {
	out := new(ProfessionDeleteResponse)
	err := grpc.Invoke(ctx, "/profession.HarryProfessionService/DeleteProfession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HarryProfessionService service

type HarryProfessionServiceServer interface {
	GetProfession(context.Context, *ProfessionRequest) (*Profession, error)
	GetAllProfession(*ProfessionRequest, HarryProfessionService_GetAllProfessionServer) error
	CreateProfession(context.Context, *Profession) (*Profession, error)
	UpdateProfession(context.Context, *Profession) (*Profession, error)
	DeleteProfession(context.Context, *Profession) (*ProfessionDeleteResponse, error)
}

func RegisterHarryProfessionServiceServer(s *grpc.Server, srv HarryProfessionServiceServer) {
	s.RegisterService(&_HarryProfessionService_serviceDesc, srv)
}

func _HarryProfessionService_GetProfession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryProfessionServiceServer).GetProfession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profession.HarryProfessionService/GetProfession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryProfessionServiceServer).GetProfession(ctx, req.(*ProfessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryProfessionService_GetAllProfession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfessionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HarryProfessionServiceServer).GetAllProfession(m, &harryProfessionServiceGetAllProfessionServer{stream})
}

type HarryProfessionService_GetAllProfessionServer interface {
	Send(*Profession) error
	grpc.ServerStream
}

type harryProfessionServiceGetAllProfessionServer struct {
	grpc.ServerStream
}

func (x *harryProfessionServiceGetAllProfessionServer) Send(m *Profession) error {
	return x.ServerStream.SendMsg(m)
}

func _HarryProfessionService_CreateProfession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryProfessionServiceServer).CreateProfession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profession.HarryProfessionService/CreateProfession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryProfessionServiceServer).CreateProfession(ctx, req.(*Profession))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryProfessionService_UpdateProfession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryProfessionServiceServer).UpdateProfession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profession.HarryProfessionService/UpdateProfession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryProfessionServiceServer).UpdateProfession(ctx, req.(*Profession))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryProfessionService_DeleteProfession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryProfessionServiceServer).DeleteProfession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profession.HarryProfessionService/DeleteProfession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryProfessionServiceServer).DeleteProfession(ctx, req.(*Profession))
	}
	return interceptor(ctx, in, info, handler)
}

var _HarryProfessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "profession.HarryProfessionService",
	HandlerType: (*HarryProfessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfession",
			Handler:    _HarryProfessionService_GetProfession_Handler,
		},
		{
			MethodName: "CreateProfession",
			Handler:    _HarryProfessionService_CreateProfession_Handler,
		},
		{
			MethodName: "UpdateProfession",
			Handler:    _HarryProfessionService_UpdateProfession_Handler,
		},
		{
			MethodName: "DeleteProfession",
			Handler:    _HarryProfessionService_DeleteProfession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllProfession",
			Handler:       _HarryProfessionService_GetAllProfession_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "profession/profession.proto",
}

func init() { proto.RegisterFile("profession/profession.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0x26, 0xed, 0xb6, 0xb6, 0x6f, 0x51, 0xe2, 0xa0, 0x25, 0x74, 0x11, 0x43, 0xf1, 0x90, 0x83,
	0x24, 0x52, 0x0f, 0x7a, 0x10, 0xa1, 0x55, 0x76, 0x05, 0x2f, 0xcb, 0xa8, 0x17, 0x2f, 0x32, 0x6d,
	0xde, 0x66, 0x07, 0x32, 0x9d, 0x98, 0x37, 0x59, 0xd8, 0x5f, 0xe0, 0xcf, 0xf2, 0xaf, 0x49, 0x66,
	0xd2, 0x24, 0x05, 0x97, 0x5d, 0xe8, 0x69, 0x66, 0xde, 0xfb, 0xbe, 0xaf, 0x5f, 0xdf, 0xf7, 0x02,
	0x67, 0x45, 0xa9, 0xaf, 0x90, 0x48, 0xea, 0x5d, 0xd2, 0x5d, 0xe3, 0xa2, 0xd4, 0x46, 0x33, 0xe8,
	0x2a, 0xf3, 0x97, 0x99, 0xd6, 0x59, 0x8e, 0x89, 0xed, 0x6c, 0xaa, 0xab, 0xc4, 0x48, 0x85, 0x64,
	0x84, 0x2a, 0x1c, 0x78, 0xfe, 0x9c, 0xb0, 0xbc, 0x91, 0x5b, 0x4c, 0x9a, 0xd3, 0x95, 0x17, 0x7f,
	0x07, 0x00, 0x97, 0xad, 0x0c, 0x7b, 0x02, 0x03, 0x99, 0x06, 0x5e, 0xe8, 0x45, 0x23, 0x3e, 0x90,
	0x29, 0x63, 0x70, 0xb2, 0x13, 0x0a, 0x83, 0x41, 0xe8, 0x45, 0x53, 0x6e, 0xef, 0xec, 0x19, 0x8c,
	0xa4, 0x12, 0x19, 0x06, 0x43, 0x5b, 0x74, 0x0f, 0x76, 0x06, 0x53, 0x49, 0xbf, 0xc4, 0xd6, 0xc8,
	0x1b, 0x0c, 0x4e, 0x42, 0x2f, 0x9a, 0xf0, 0x89, 0xa4, 0x95, 0x7d, 0xb3, 0xf7, 0x30, 0xfd, 0x51,
	0xa4, 0xc2, 0x60, 0xba, 0x32, 0xc1, 0x28, 0xf4, 0xa2, 0xd3, 0xe5, 0x3c, 0x76, 0x8e, 0xe3, 0xbd,
	0xe3, 0xf8, 0xfb, 0xde, 0x31, 0xef, 0xc0, 0x35, 0xf3, 0x53, 0x89, 0x0d, 0x73, 0x7c, 0x3f, 0xb3,
	0x05, 0xd7, 0xcc, 0xcf, 0x98, 0xa3, 0x63, 0x3e, 0xba, 0x9f, 0xd9, 0x82, 0xd9, 0x6b, 0x98, 0x34,
	0x43, 0xa2, 0x60, 0x12, 0x0e, 0xa3, 0xd3, 0xa5, 0x1f, 0xef, 0xa7, 0xf6, 0xcd, 0x9d, 0xbc, 0x45,
	0x2c, 0xde, 0xc1, 0xd3, 0x2e, 0x07, 0x8e, 0xbf, 0x2b, 0x24, 0xf3, 0x90, 0x39, 0x2e, 0xce, 0x21,
	0xe8, 0x88, 0xee, 0xd7, 0x39, 0x52, 0xa1, 0x77, 0x84, 0x6c, 0x06, 0x63, 0x32, 0xc2, 0x54, 0x64,
	0x35, 0xa6, 0xbc, 0x79, 0xd5, 0x3a, 0x5b, 0x9d, 0x3a, 0x9d, 0x11, 0xb7, 0xf7, 0xe5, 0x9f, 0x21,
	0xcc, 0xbe, 0x88, 0xb2, 0xbc, 0xed, 0x72, 0x6c, 0x5c, 0xb2, 0x73, 0x78, 0x7c, 0x81, 0xa6, 0x97,
	0xef, 0x8b, 0xf8, 0x70, 0x8b, 0x0e, 0x6d, 0xcf, 0x67, 0xfd, 0x76, 0x8f, 0xf6, 0x15, 0xfc, 0x0b,
	0x34, 0xab, 0x3c, 0x3f, 0x5a, 0xea, 0x8d, 0xc7, 0xd6, 0xe0, 0xbb, 0x94, 0x7a, 0x62, 0x77, 0xa0,
	0xef, 0x34, 0xb4, 0x06, 0xdf, 0xed, 0xc8, 0x11, 0x1a, 0x97, 0xe0, 0xbb, 0xa9, 0x3f, 0x40, 0xe3,
	0xd5, 0xff, 0xff, 0xec, 0x61, 0x6a, 0xeb, 0x8f, 0x3f, 0x3f, 0x64, 0xd2, 0x5c, 0x57, 0x9b, 0x78,
	0xab, 0x55, 0x22, 0x8c, 0x56, 0x74, 0x4b, 0x06, 0x15, 0x19, 0x14, 0x2a, 0xb9, 0xae, 0x33, 0xb2,
	0x9b, 0xa7, 0x74, 0x8a, 0x39, 0x25, 0xf6, 0xe8, 0x7d, 0xd6, 0x9b, 0xb1, 0xed, 0xbe, 0xfd, 0x17,
	0x00, 0x00, 0xff, 0xff, 0xd0, 0x54, 0x9a, 0x10, 0xf6, 0x03, 0x00, 0x00,
}
