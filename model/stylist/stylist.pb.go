// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stylist.proto

/*
Package stylist is a generated protocol buffer package.

Package models is where all the action for models will happen

It is generated from these files:
	stylist.proto

It has these top-level messages:
	Stylist
	Request
	DeleteResponse
	LoginRequest
	ReponseMessage
	SetPasswordRequest
	PasswordRequest
	ResetPasswordRequest
*/
package stylist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// stylist : message
type Stylist struct {
	ID            int32  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	FirstName     string `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName      string `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	PhoneNo       int64  `protobuf:"varint,5,opt,name=phone_no,json=phoneNo" json:"phone_no,omitempty"`
	EmailId       string `protobuf:"bytes,6,opt,name=email_id,json=emailId" json:"email_id,omitempty"`
	Address       string `protobuf:"bytes,7,opt,name=address" json:"address,omitempty"`
	Password      string `protobuf:"bytes,8,opt,name=password" json:"password,omitempty"`
	IsActive      bool   `protobuf:"varint,9,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	IsDeleted     bool   `protobuf:"varint,10,opt,name=Is_deleted,json=IsDeleted" json:"Is_deleted,omitempty"`
	ActivationKey int32  `protobuf:"varint,11,opt,name=activation_key,json=activationKey" json:"activation_key,omitempty"`
}

func (m *Stylist) Reset()                    { *m = Stylist{} }
func (m *Stylist) String() string            { return proto.CompactTextString(m) }
func (*Stylist) ProtoMessage()               {}
func (*Stylist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Stylist) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Stylist) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Stylist) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Stylist) GetPhoneNo() int64 {
	if m != nil {
		return m.PhoneNo
	}
	return 0
}

func (m *Stylist) GetEmailId() string {
	if m != nil {
		return m.EmailId
	}
	return ""
}

func (m *Stylist) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Stylist) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Stylist) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Stylist) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Stylist) GetActivationKey() int32 {
	if m != nil {
		return m.ActivationKey
	}
	return 0
}

// request : message
type Request struct {
	Id            int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FirstName     string `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	ActivationKey int32  `protobuf:"varint,3,opt,name=activation_key,json=activationKey" json:"activation_key,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Request) GetActivationKey() int32 {
	if m != nil {
		return m.ActivationKey
	}
	return 0
}

// DeleteResponse : message
type DeleteResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Code   int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DeleteResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

// LoginRequest : message
type LoginRequest struct {
	EmailId  string `protobuf:"bytes,1,opt,name=email_id,json=emailId" json:"email_id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginRequest) GetEmailId() string {
	if m != nil {
		return m.EmailId
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// ResponseMessage : message
type ReponseMessage struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Token   string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *ReponseMessage) Reset()                    { *m = ReponseMessage{} }
func (m *ReponseMessage) String() string            { return proto.CompactTextString(m) }
func (*ReponseMessage) ProtoMessage()               {}
func (*ReponseMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReponseMessage) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReponseMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ReponseMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReponseMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// SetPasswordRequest : message
type SetPasswordRequest struct {
	Id              int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Password        string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	ConfirmPassword string `protobuf:"bytes,3,opt,name=confirmPassword" json:"confirmPassword,omitempty"`
	NewPassword     string `protobuf:"bytes,4,opt,name=newPassword" json:"newPassword,omitempty"`
}

func (m *SetPasswordRequest) Reset()                    { *m = SetPasswordRequest{} }
func (m *SetPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPasswordRequest) ProtoMessage()               {}
func (*SetPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SetPasswordRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SetPasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SetPasswordRequest) GetConfirmPassword() string {
	if m != nil {
		return m.ConfirmPassword
	}
	return ""
}

func (m *SetPasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

// PasswordRequest : message
type PasswordRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *PasswordRequest) Reset()                    { *m = PasswordRequest{} }
func (m *PasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*PasswordRequest) ProtoMessage()               {}
func (*PasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PasswordRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// ResetPasswordRequest : message
type ResetPasswordRequest struct {
	Email           string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Token           string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Password        string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	ConfirmPassword string `protobuf:"bytes,4,opt,name=confirmPassword" json:"confirmPassword,omitempty"`
}

func (m *ResetPasswordRequest) Reset()                    { *m = ResetPasswordRequest{} }
func (m *ResetPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordRequest) ProtoMessage()               {}
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResetPasswordRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ResetPasswordRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ResetPasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ResetPasswordRequest) GetConfirmPassword() string {
	if m != nil {
		return m.ConfirmPassword
	}
	return ""
}

func init() {
	proto.RegisterType((*Stylist)(nil), "stylist.stylist")
	proto.RegisterType((*Request)(nil), "stylist.request")
	proto.RegisterType((*DeleteResponse)(nil), "stylist.DeleteResponse")
	proto.RegisterType((*LoginRequest)(nil), "stylist.loginRequest")
	proto.RegisterType((*ReponseMessage)(nil), "stylist.reponseMessage")
	proto.RegisterType((*SetPasswordRequest)(nil), "stylist.setPasswordRequest")
	proto.RegisterType((*PasswordRequest)(nil), "stylist.passwordRequest")
	proto.RegisterType((*ResetPasswordRequest)(nil), "stylist.resetPasswordRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HarryStylistService service

type HarryStylistServiceClient interface {
	GetStylist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Stylist, error)
	GetAllStylists(ctx context.Context, in *Request, opts ...grpc.CallOption) (HarryStylistService_GetAllStylistsClient, error)
	CheckStylistActivation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Stylist, error)
	CreateStylist(ctx context.Context, in *Stylist, opts ...grpc.CallOption) (*Stylist, error)
	UpdateStylist(ctx context.Context, in *Stylist, opts ...grpc.CallOption) (*Stylist, error)
	DeleteStylist(ctx context.Context, in *Stylist, opts ...grpc.CallOption) (*DeleteResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ReponseMessage, error)
	ChangePassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*ReponseMessage, error)
	ForgotPassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*ReponseMessage, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ReponseMessage, error)
}

type harryStylistServiceClient struct {
	cc *grpc.ClientConn
}

func NewHarryStylistServiceClient(cc *grpc.ClientConn) HarryStylistServiceClient {
	return &harryStylistServiceClient{cc}
}

func (c *harryStylistServiceClient) GetStylist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Stylist, error) {
	out := new(Stylist)
	err := grpc.Invoke(ctx, "/stylist.HarryStylistService/GetStylist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryStylistServiceClient) GetAllStylists(ctx context.Context, in *Request, opts ...grpc.CallOption) (HarryStylistService_GetAllStylistsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HarryStylistService_serviceDesc.Streams[0], c.cc, "/stylist.HarryStylistService/GetAllStylists", opts...)
	if err != nil {
		return nil, err
	}
	x := &harryStylistServiceGetAllStylistsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HarryStylistService_GetAllStylistsClient interface {
	Recv() (*Stylist, error)
	grpc.ClientStream
}

type harryStylistServiceGetAllStylistsClient struct {
	grpc.ClientStream
}

func (x *harryStylistServiceGetAllStylistsClient) Recv() (*Stylist, error) {
	m := new(Stylist)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *harryStylistServiceClient) CheckStylistActivation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Stylist, error) {
	out := new(Stylist)
	err := grpc.Invoke(ctx, "/stylist.HarryStylistService/CheckStylistActivation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryStylistServiceClient) CreateStylist(ctx context.Context, in *Stylist, opts ...grpc.CallOption) (*Stylist, error) {
	out := new(Stylist)
	err := grpc.Invoke(ctx, "/stylist.HarryStylistService/CreateStylist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryStylistServiceClient) UpdateStylist(ctx context.Context, in *Stylist, opts ...grpc.CallOption) (*Stylist, error) {
	out := new(Stylist)
	err := grpc.Invoke(ctx, "/stylist.HarryStylistService/UpdateStylist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryStylistServiceClient) DeleteStylist(ctx context.Context, in *Stylist, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/stylist.HarryStylistService/DeleteStylist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryStylistServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ReponseMessage, error) {
	out := new(ReponseMessage)
	err := grpc.Invoke(ctx, "/stylist.HarryStylistService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryStylistServiceClient) ChangePassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*ReponseMessage, error) {
	out := new(ReponseMessage)
	err := grpc.Invoke(ctx, "/stylist.HarryStylistService/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryStylistServiceClient) ForgotPassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*ReponseMessage, error) {
	out := new(ReponseMessage)
	err := grpc.Invoke(ctx, "/stylist.HarryStylistService/ForgotPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryStylistServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ReponseMessage, error) {
	out := new(ReponseMessage)
	err := grpc.Invoke(ctx, "/stylist.HarryStylistService/ResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HarryStylistService service

type HarryStylistServiceServer interface {
	GetStylist(context.Context, *Request) (*Stylist, error)
	GetAllStylists(*Request, HarryStylistService_GetAllStylistsServer) error
	CheckStylistActivation(context.Context, *Request) (*Stylist, error)
	CreateStylist(context.Context, *Stylist) (*Stylist, error)
	UpdateStylist(context.Context, *Stylist) (*Stylist, error)
	DeleteStylist(context.Context, *Stylist) (*DeleteResponse, error)
	Login(context.Context, *LoginRequest) (*ReponseMessage, error)
	ChangePassword(context.Context, *SetPasswordRequest) (*ReponseMessage, error)
	ForgotPassword(context.Context, *PasswordRequest) (*ReponseMessage, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ReponseMessage, error)
}

func RegisterHarryStylistServiceServer(s *grpc.Server, srv HarryStylistServiceServer) {
	s.RegisterService(&_HarryStylistService_serviceDesc, srv)
}

func _HarryStylistService_GetStylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryStylistServiceServer).GetStylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stylist.HarryStylistService/GetStylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryStylistServiceServer).GetStylist(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryStylistService_GetAllStylists_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HarryStylistServiceServer).GetAllStylists(m, &harryStylistServiceGetAllStylistsServer{stream})
}

type HarryStylistService_GetAllStylistsServer interface {
	Send(*Stylist) error
	grpc.ServerStream
}

type harryStylistServiceGetAllStylistsServer struct {
	grpc.ServerStream
}

func (x *harryStylistServiceGetAllStylistsServer) Send(m *Stylist) error {
	return x.ServerStream.SendMsg(m)
}

func _HarryStylistService_CheckStylistActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryStylistServiceServer).CheckStylistActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stylist.HarryStylistService/CheckStylistActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryStylistServiceServer).CheckStylistActivation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryStylistService_CreateStylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stylist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryStylistServiceServer).CreateStylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stylist.HarryStylistService/CreateStylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryStylistServiceServer).CreateStylist(ctx, req.(*Stylist))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryStylistService_UpdateStylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stylist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryStylistServiceServer).UpdateStylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stylist.HarryStylistService/UpdateStylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryStylistServiceServer).UpdateStylist(ctx, req.(*Stylist))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryStylistService_DeleteStylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stylist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryStylistServiceServer).DeleteStylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stylist.HarryStylistService/DeleteStylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryStylistServiceServer).DeleteStylist(ctx, req.(*Stylist))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryStylistService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryStylistServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stylist.HarryStylistService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryStylistServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryStylistService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryStylistServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stylist.HarryStylistService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryStylistServiceServer).ChangePassword(ctx, req.(*SetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryStylistService_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryStylistServiceServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stylist.HarryStylistService/ForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryStylistServiceServer).ForgotPassword(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryStylistService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryStylistServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stylist.HarryStylistService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryStylistServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HarryStylistService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stylist.HarryStylistService",
	HandlerType: (*HarryStylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStylist",
			Handler:    _HarryStylistService_GetStylist_Handler,
		},
		{
			MethodName: "CheckStylistActivation",
			Handler:    _HarryStylistService_CheckStylistActivation_Handler,
		},
		{
			MethodName: "CreateStylist",
			Handler:    _HarryStylistService_CreateStylist_Handler,
		},
		{
			MethodName: "UpdateStylist",
			Handler:    _HarryStylistService_UpdateStylist_Handler,
		},
		{
			MethodName: "DeleteStylist",
			Handler:    _HarryStylistService_DeleteStylist_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _HarryStylistService_Login_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _HarryStylistService_ChangePassword_Handler,
		},
		{
			MethodName: "ForgotPassword",
			Handler:    _HarryStylistService_ForgotPassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _HarryStylistService_ResetPassword_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllStylists",
			Handler:       _HarryStylistService_GetAllStylists_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stylist.proto",
}

func init() { proto.RegisterFile("stylist.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x4e, 0xdb, 0x4c,
	0x10, 0x95, 0x9d, 0x04, 0x27, 0xc3, 0x17, 0xf3, 0x69, 0x4b, 0xe9, 0x16, 0x84, 0x14, 0x59, 0xaa,
	0x9a, 0x2b, 0x84, 0x8a, 0xd4, 0x4a, 0x15, 0x37, 0x28, 0x14, 0x1a, 0xb5, 0x45, 0x95, 0x51, 0xaf,
	0xad, 0x6d, 0x3c, 0x84, 0x15, 0x8e, 0xd7, 0xdd, 0x5d, 0x40, 0x79, 0x83, 0x5e, 0xf4, 0x31, 0xfa,
	0x84, 0x7d, 0x82, 0x2a, 0xbb, 0x6b, 0xc7, 0x09, 0xa1, 0xc0, 0x55, 0x3c, 0x3f, 0x67, 0xcf, 0x99,
	0xa3, 0x19, 0x05, 0xba, 0x4a, 0x4f, 0x33, 0xae, 0xf4, 0x5e, 0x21, 0x85, 0x16, 0x24, 0x70, 0x61,
	0xf4, 0xdb, 0x87, 0xf2, 0x9b, 0x84, 0xe0, 0x0f, 0x8f, 0xa9, 0xd7, 0xf3, 0xfa, 0xad, 0xd8, 0x1f,
	0x1e, 0x93, 0x5d, 0x80, 0x0b, 0x2e, 0x95, 0x4e, 0x72, 0x36, 0x41, 0xea, 0xf7, 0xbc, 0x7e, 0x27,
	0xee, 0x98, 0xcc, 0x19, 0x9b, 0x20, 0xd9, 0x81, 0x4e, 0xc6, 0xca, 0x6a, 0xc3, 0x54, 0xdb, 0xb3,
	0x84, 0x29, 0xbe, 0x84, 0x76, 0x71, 0x29, 0x72, 0x4c, 0x72, 0x41, 0x5b, 0x3d, 0xaf, 0xdf, 0x88,
	0x03, 0x13, 0x9f, 0x89, 0x59, 0x09, 0x27, 0x8c, 0x67, 0x09, 0x4f, 0xe9, 0x9a, 0x81, 0x05, 0x26,
	0x1e, 0xa6, 0x84, 0x42, 0xc0, 0xd2, 0x54, 0xa2, 0x52, 0x34, 0xb0, 0x15, 0x17, 0x92, 0x6d, 0x68,
	0x17, 0x4c, 0xa9, 0x5b, 0x21, 0x53, 0xda, 0xb6, 0x5c, 0x65, 0x3c, 0x13, 0xc2, 0x55, 0xc2, 0x46,
	0x9a, 0xdf, 0x20, 0xed, 0xf4, 0xbc, 0x7e, 0x3b, 0x6e, 0x73, 0x75, 0x64, 0xe2, 0xd9, 0x10, 0x43,
	0x95, 0xa4, 0x98, 0xa1, 0xc6, 0x94, 0x82, 0xa9, 0x76, 0x86, 0xea, 0xd8, 0x26, 0xc8, 0x2b, 0x08,
	0x0d, 0x90, 0x69, 0x2e, 0xf2, 0xe4, 0x0a, 0xa7, 0x74, 0xdd, 0xcc, 0xdf, 0x9d, 0x67, 0x3f, 0xe1,
	0x34, 0x4a, 0x20, 0x90, 0xf8, 0xe3, 0x1a, 0xad, 0x4b, 0x3c, 0x2d, 0x5d, 0xe2, 0xe9, 0x43, 0x2e,
	0xdd, 0x25, 0x68, 0xac, 0x22, 0x38, 0x84, 0xd0, 0x4a, 0x8a, 0x51, 0x15, 0x22, 0x57, 0x48, 0xb6,
	0x60, 0x4d, 0x69, 0xa6, 0xaf, 0x95, 0xe1, 0xea, 0xc4, 0x2e, 0x22, 0x04, 0x9a, 0x23, 0x91, 0x5a,
	0xa6, 0x56, 0x6c, 0xbe, 0xa3, 0x0f, 0xf0, 0x5f, 0x26, 0xc6, 0x3c, 0x8f, 0x9d, 0xc6, 0xba, 0xc5,
	0xde, 0xa2, 0xc5, 0x75, 0x23, 0xfd, 0x45, 0x23, 0xa3, 0x0c, 0x42, 0x89, 0x86, 0xfd, 0x0b, 0x2a,
	0xc5, 0xc6, 0x58, 0x91, 0x79, 0x73, 0xb2, 0x9a, 0x30, 0x7f, 0x41, 0x18, 0x85, 0x60, 0x62, 0x61,
	0x6e, 0x1b, 0xca, 0x90, 0x6c, 0x42, 0x4b, 0x8b, 0x2b, 0xcc, 0x69, 0xd3, 0xe4, 0x6d, 0x10, 0xfd,
	0xf2, 0x80, 0x28, 0xd4, 0x5f, 0x1d, 0x7b, 0x7c, 0x8f, 0xbf, 0xff, 0x10, 0x4c, 0xfa, 0xb0, 0x31,
	0x12, 0xf9, 0x05, 0x97, 0x93, 0xf2, 0x15, 0x47, 0xbd, 0x9c, 0x26, 0x3d, 0x58, 0xcf, 0xf1, 0xb6,
	0xea, 0xb2, 0x42, 0xea, 0xa9, 0xe8, 0x35, 0x6c, 0x14, 0x4b, 0x52, 0x36, 0xa1, 0x65, 0x6c, 0x73,
	0x1e, 0xda, 0x20, 0xfa, 0xe9, 0xc1, 0xa6, 0xc4, 0x15, 0xca, 0x57, 0xb6, 0xcf, 0x87, 0xf7, 0x6b,
	0xc3, 0x2f, 0x4c, 0xd5, 0x78, 0x78, 0xaa, 0xe6, 0xca, 0xa9, 0xde, 0xfc, 0x69, 0xc2, 0xb3, 0x8f,
	0x4c, 0xca, 0xe9, 0xb9, 0x3d, 0xe1, 0x73, 0x94, 0x37, 0x7c, 0x84, 0x64, 0x1f, 0xe0, 0x14, 0xb5,
	0x4b, 0x92, 0xff, 0xf7, 0xca, 0xe3, 0x77, 0x3b, 0xbc, 0x3d, 0xcf, 0x94, 0xb7, 0xff, 0x16, 0xc2,
	0x53, 0xd4, 0x47, 0x59, 0xe6, 0x40, 0xea, 0x31, 0xa8, 0x7d, 0x8f, 0x1c, 0xc2, 0xd6, 0xe0, 0x12,
	0x47, 0x57, 0x0e, 0x76, 0x54, 0x2d, 0xf5, 0xa3, 0x58, 0x0f, 0xa0, 0x3b, 0x90, 0xc8, 0x34, 0xde,
	0x95, 0xea, 0x7e, 0x57, 0x83, 0xbe, 0x15, 0xe9, 0x13, 0x41, 0xef, 0xa1, 0x6b, 0xef, 0xeb, 0x7e,
	0xd0, 0x8b, 0x2a, 0xb3, 0x74, 0x89, 0xef, 0xa0, 0xf5, 0x79, 0x76, 0x5d, 0xe4, 0x79, 0xd5, 0x51,
	0xbf, 0xb6, 0x1a, 0x70, 0xe9, 0x7a, 0x4e, 0x20, 0x1c, 0x5c, 0xb2, 0x7c, 0x8c, 0xd5, 0x1a, 0xee,
	0xcc, 0x59, 0xef, 0xec, 0xcf, 0xfd, 0xef, 0x0c, 0x20, 0x3c, 0x11, 0x72, 0x2c, 0x2a, 0x04, 0xa1,
	0x55, 0x6b, 0xf1, 0xd8, 0x47, 0x4e, 0xa1, 0x1b, 0xd7, 0xb7, 0x96, 0xec, 0xd6, 0x3a, 0x9f, 0xa0,
	0xe6, 0xfb, 0x9a, 0xf9, 0x0b, 0x39, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x72, 0x19, 0x75,
	0x53, 0x06, 0x00, 0x00,
}
