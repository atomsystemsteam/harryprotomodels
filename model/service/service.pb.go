// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service/service.proto

It has these top-level messages:
	Service
	Request
	DeleteResponse
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Service struct {
	Id        int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IsActive  bool                       `protobuf:"varint,3,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=UpdatedAt" json:"UpdatedAt,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
	DeletedAt *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=DeletedAt" json:"DeletedAt,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Service) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Service) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Service) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Service) GetDeletedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

type Request struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Code   int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DeleteResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*Service)(nil), "service.Service")
	proto.RegisterType((*Request)(nil), "service.request")
	proto.RegisterType((*DeleteResponse)(nil), "service.deleteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HarryServiceService service

type HarryServiceServiceClient interface {
	GetService(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Service, error)
	GetAllService(ctx context.Context, in *Request, opts ...grpc.CallOption) (HarryServiceService_GetAllServiceClient, error)
	CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	UpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	DeleteService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type harryServiceServiceClient struct {
	cc *grpc.ClientConn
}

func NewHarryServiceServiceClient(cc *grpc.ClientConn) HarryServiceServiceClient {
	return &harryServiceServiceClient{cc}
}

func (c *harryServiceServiceClient) GetService(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/service.HarryServiceService/GetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryServiceServiceClient) GetAllService(ctx context.Context, in *Request, opts ...grpc.CallOption) (HarryServiceService_GetAllServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HarryServiceService_serviceDesc.Streams[0], c.cc, "/service.HarryServiceService/GetAllService", opts...)
	if err != nil {
		return nil, err
	}
	x := &harryServiceServiceGetAllServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HarryServiceService_GetAllServiceClient interface {
	Recv() (*Service, error)
	grpc.ClientStream
}

type harryServiceServiceGetAllServiceClient struct {
	grpc.ClientStream
}

func (x *harryServiceServiceGetAllServiceClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *harryServiceServiceClient) CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/service.HarryServiceService/CreateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryServiceServiceClient) UpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/service.HarryServiceService/UpdateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryServiceServiceClient) DeleteService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/service.HarryServiceService/DeleteService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HarryServiceService service

type HarryServiceServiceServer interface {
	GetService(context.Context, *Request) (*Service, error)
	GetAllService(*Request, HarryServiceService_GetAllServiceServer) error
	CreateService(context.Context, *Service) (*Service, error)
	UpdateService(context.Context, *Service) (*Service, error)
	DeleteService(context.Context, *Service) (*DeleteResponse, error)
}

func RegisterHarryServiceServiceServer(s *grpc.Server, srv HarryServiceServiceServer) {
	s.RegisterService(&_HarryServiceService_serviceDesc, srv)
}

func _HarryServiceService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryServiceServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.HarryServiceService/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryServiceServiceServer).GetService(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryServiceService_GetAllService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HarryServiceServiceServer).GetAllService(m, &harryServiceServiceGetAllServiceServer{stream})
}

type HarryServiceService_GetAllServiceServer interface {
	Send(*Service) error
	grpc.ServerStream
}

type harryServiceServiceGetAllServiceServer struct {
	grpc.ServerStream
}

func (x *harryServiceServiceGetAllServiceServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

func _HarryServiceService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryServiceServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.HarryServiceService/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryServiceServiceServer).CreateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryServiceService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryServiceServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.HarryServiceService/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryServiceServiceServer).UpdateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryServiceService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryServiceServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.HarryServiceService/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryServiceServiceServer).DeleteService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

var _HarryServiceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.HarryServiceService",
	HandlerType: (*HarryServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetService",
			Handler:    _HarryServiceService_GetService_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _HarryServiceService_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _HarryServiceService_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _HarryServiceService_DeleteService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllService",
			Handler:       _HarryServiceService_GetAllService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/service.proto",
}

func init() { proto.RegisterFile("service/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xd9, 0xd8, 0x7f, 0x19, 0x49, 0x91, 0x15, 0x35, 0xd4, 0x83, 0xa1, 0xa7, 0x5c, 0x4c,
	0x4b, 0x8b, 0x20, 0xe2, 0xa5, 0x2a, 0xd4, 0xf3, 0xaa, 0x17, 0x2f, 0x92, 0x36, 0x63, 0x59, 0x48,
	0x9b, 0xb8, 0xbb, 0x2d, 0xf8, 0x7d, 0xfc, 0x90, 0x1e, 0xa5, 0xfb, 0x27, 0x45, 0x54, 0x6a, 0x4f,
	0x99, 0x79, 0xbc, 0x1f, 0x79, 0x79, 0x13, 0x38, 0x92, 0x28, 0x56, 0x7c, 0x8a, 0x3d, 0xfb, 0x4c,
	0x4a, 0x51, 0xa8, 0x82, 0x36, 0xed, 0xda, 0x39, 0x9b, 0x15, 0xc5, 0x2c, 0xc7, 0x9e, 0x96, 0x27,
	0xcb, 0xd7, 0x9e, 0xe2, 0x73, 0x94, 0x2a, 0x9d, 0x97, 0xc6, 0xd9, 0xfd, 0x24, 0xd0, 0x7c, 0x30,
	0x66, 0xda, 0x06, 0x8f, 0x67, 0x21, 0x89, 0x48, 0x5c, 0x67, 0x1e, 0xcf, 0x28, 0x85, 0xda, 0x22,
	0x9d, 0x63, 0xe8, 0x45, 0x24, 0xf6, 0x99, 0x9e, 0xe9, 0x29, 0xf8, 0x5c, 0xbe, 0xa4, 0x53, 0xc5,
	0x57, 0x18, 0xee, 0x45, 0x24, 0x6e, 0xb1, 0x16, 0x97, 0x23, 0xbd, 0xd3, 0x4b, 0xf0, 0x9f, 0xca,
	0x2c, 0x55, 0x98, 0x8d, 0x54, 0x58, 0x8b, 0x48, 0xbc, 0x3f, 0xe8, 0x24, 0x26, 0x41, 0xe2, 0x12,
	0x24, 0x8f, 0x2e, 0x01, 0xdb, 0x98, 0xd7, 0xe4, 0xad, 0x40, 0x4b, 0xd6, 0xb7, 0x93, 0x95, 0x79,
	0x4d, 0xde, 0x61, 0x8e, 0x86, 0x6c, 0x6c, 0x27, 0x2b, 0x73, 0xf7, 0x1c, 0x9a, 0x02, 0xdf, 0x96,
	0x28, 0xd5, 0x7f, 0xbe, 0xbc, 0x7b, 0x0d, 0xed, 0x4c, 0xb3, 0x0c, 0x65, 0x59, 0x2c, 0x24, 0xd2,
	0x63, 0x68, 0x48, 0x95, 0xaa, 0xa5, 0xd4, 0xa4, 0xcf, 0xec, 0xb6, 0xa6, 0xa7, 0x45, 0x66, 0xe8,
	0x3a, 0xd3, 0xf3, 0xe0, 0xc3, 0x83, 0xc3, 0xfb, 0x54, 0x88, 0x77, 0x5b, 0xb6, 0xeb, 0xbc, 0x0f,
	0x30, 0x46, 0xe5, 0xb6, 0x83, 0xc4, 0xdd, 0xd1, 0x26, 0xeb, 0x6c, 0x14, 0xe7, 0xb9, 0x80, 0x60,
	0x8c, 0x6a, 0x94, 0xe7, 0x3b, 0x40, 0x7d, 0x42, 0x87, 0x10, 0x98, 0xd2, 0x7e, 0x62, 0x56, 0xf9,
	0xe5, 0x5d, 0x43, 0x08, 0xcc, 0x8d, 0x76, 0x81, 0xae, 0x20, 0x30, 0x25, 0xff, 0x0d, 0x9d, 0x54,
	0xca, 0xf7, 0x4a, 0x6f, 0xfc, 0x67, 0xf7, 0xeb, 0x4e, 0x1a, 0xfa, 0x7a, 0xc3, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x5c, 0xbd, 0x01, 0xf6, 0xe3, 0x02, 0x00, 0x00,
}
