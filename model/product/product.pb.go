// Code generated by protoc-gen-go. DO NOT EDIT.
// source: product/product.proto

/*
Package product is a generated protocol buffer package.

It is generated from these files:
	product/product.proto

It has these top-level messages:
	Product
	ProductRequestById
	ProductRequestByName
	ProductResponse
	DeleteRequest
	ProductList
*/
package product

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Product struct {
	Id          int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title       string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Name        string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Price       float32                    `protobuf:"fixed32,4,opt,name=price" json:"price,omitempty"`
	Description string                     `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	IsActive    bool                       `protobuf:"varint,6,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	StylistId   int32                      `protobuf:"varint,7,opt,name=stylist_id,json=stylistId" json:"stylist_id,omitempty"`
	ImageId     int32                      `protobuf:"varint,8,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	UpdatedAt   *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=UpdatedAt" json:"UpdatedAt,omitempty"`
	CreatedAt   *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Product) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Product) GetStylistId() int32 {
	if m != nil {
		return m.StylistId
	}
	return 0
}

func (m *Product) GetImageId() int32 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

func (m *Product) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Product) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type ProductRequestById struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ProductRequestById) Reset()                    { *m = ProductRequestById{} }
func (m *ProductRequestById) String() string            { return proto.CompactTextString(m) }
func (*ProductRequestById) ProtoMessage()               {}
func (*ProductRequestById) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProductRequestById) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ProductRequestByName struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ProductRequestByName) Reset()                    { *m = ProductRequestByName{} }
func (m *ProductRequestByName) String() string            { return proto.CompactTextString(m) }
func (*ProductRequestByName) ProtoMessage()               {}
func (*ProductRequestByName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProductRequestByName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProductResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ProductResponse) Reset()                    { *m = ProductResponse{} }
func (m *ProductResponse) String() string            { return proto.CompactTextString(m) }
func (*ProductResponse) ProtoMessage()               {}
func (*ProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProductResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ProductResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ProductResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ProductList struct {
	List []*Product `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ProductList) Reset()                    { *m = ProductList{} }
func (m *ProductList) String() string            { return proto.CompactTextString(m) }
func (*ProductList) ProtoMessage()               {}
func (*ProductList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ProductList) GetList() []*Product {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*Product)(nil), "product.product")
	proto.RegisterType((*ProductRequestById)(nil), "product.productRequestById")
	proto.RegisterType((*ProductRequestByName)(nil), "product.productRequestByName")
	proto.RegisterType((*ProductResponse)(nil), "product.productResponse")
	proto.RegisterType((*DeleteRequest)(nil), "product.deleteRequest")
	proto.RegisterType((*ProductList)(nil), "product.productList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HarryProductService service

type HarryProductServiceClient interface {
	GetProductById(ctx context.Context, in *ProductRequestById, opts ...grpc.CallOption) (*Product, error)
	GetProductByName(ctx context.Context, in *ProductRequestByName, opts ...grpc.CallOption) (*ProductList, error)
	GetAllProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (HarryProductService_GetAllProductClient, error)
	CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ProductResponse, error)
}

type harryProductServiceClient struct {
	cc *grpc.ClientConn
}

func NewHarryProductServiceClient(cc *grpc.ClientConn) HarryProductServiceClient {
	return &harryProductServiceClient{cc}
}

func (c *harryProductServiceClient) GetProductById(ctx context.Context, in *ProductRequestById, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := grpc.Invoke(ctx, "/product.HarryProductService/GetProductById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryProductServiceClient) GetProductByName(ctx context.Context, in *ProductRequestByName, opts ...grpc.CallOption) (*ProductList, error) {
	out := new(ProductList)
	err := grpc.Invoke(ctx, "/product.HarryProductService/GetProductByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryProductServiceClient) GetAllProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (HarryProductService_GetAllProductClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HarryProductService_serviceDesc.Streams[0], c.cc, "/product.HarryProductService/GetAllProduct", opts...)
	if err != nil {
		return nil, err
	}
	x := &harryProductServiceGetAllProductClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HarryProductService_GetAllProductClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type harryProductServiceGetAllProductClient struct {
	grpc.ClientStream
}

func (x *harryProductServiceGetAllProductClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *harryProductServiceClient) CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/product.HarryProductService/CreateProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryProductServiceClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/product.HarryProductService/UpdateProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryProductServiceClient) DeleteProduct(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/product.HarryProductService/DeleteProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HarryProductService service

type HarryProductServiceServer interface {
	GetProductById(context.Context, *ProductRequestById) (*Product, error)
	GetProductByName(context.Context, *ProductRequestByName) (*ProductList, error)
	GetAllProduct(*Product, HarryProductService_GetAllProductServer) error
	CreateProduct(context.Context, *Product) (*ProductResponse, error)
	UpdateProduct(context.Context, *Product) (*ProductResponse, error)
	DeleteProduct(context.Context, *DeleteRequest) (*ProductResponse, error)
}

func RegisterHarryProductServiceServer(s *grpc.Server, srv HarryProductServiceServer) {
	s.RegisterService(&_HarryProductService_serviceDesc, srv)
}

func _HarryProductService_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryProductServiceServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.HarryProductService/GetProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryProductServiceServer).GetProductById(ctx, req.(*ProductRequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryProductService_GetProductByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequestByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryProductServiceServer).GetProductByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.HarryProductService/GetProductByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryProductServiceServer).GetProductByName(ctx, req.(*ProductRequestByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryProductService_GetAllProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Product)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HarryProductServiceServer).GetAllProduct(m, &harryProductServiceGetAllProductServer{stream})
}

type HarryProductService_GetAllProductServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type harryProductServiceGetAllProductServer struct {
	grpc.ServerStream
}

func (x *harryProductServiceGetAllProductServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func _HarryProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.HarryProductService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryProductServiceServer).CreateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.HarryProductService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryProductServiceServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.HarryProductService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryProductServiceServer).DeleteProduct(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HarryProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.HarryProductService",
	HandlerType: (*HarryProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductById",
			Handler:    _HarryProductService_GetProductById_Handler,
		},
		{
			MethodName: "GetProductByName",
			Handler:    _HarryProductService_GetProductByName_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _HarryProductService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _HarryProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _HarryProductService_DeleteProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllProduct",
			Handler:       _HarryProductService_GetAllProduct_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "product/product.proto",
}

func init() { proto.RegisterFile("product/product.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6a, 0xdb, 0x4c,
	0x10, 0x45, 0x4e, 0xfc, 0x37, 0xc6, 0xf9, 0xc2, 0x7e, 0x6e, 0xd8, 0x3a, 0x84, 0x08, 0x93, 0x0b,
	0xd1, 0x0b, 0xa9, 0x38, 0x14, 0x5a, 0x7c, 0x51, 0x9c, 0x16, 0x5c, 0x43, 0x29, 0x45, 0x6d, 0x29,
	0xf4, 0x26, 0xc8, 0xda, 0xa9, 0xb3, 0x20, 0x79, 0x55, 0xed, 0x38, 0xe0, 0xe7, 0xe8, 0x3b, 0xf5,
	0xb9, 0x8a, 0x56, 0x2b, 0xdb, 0xb5, 0x30, 0x85, 0x5e, 0xed, 0xce, 0xcc, 0x99, 0xb3, 0xa3, 0x73,
	0x06, 0xc1, 0x93, 0x2c, 0x57, 0x62, 0x1d, 0x53, 0x60, 0x4f, 0x3f, 0xcb, 0x15, 0x29, 0xd6, 0xb6,
	0xe1, 0xf0, 0x7a, 0xa9, 0xd4, 0x32, 0xc1, 0xc0, 0xa4, 0x17, 0xeb, 0xef, 0x01, 0xc9, 0x14, 0x35,
	0x45, 0x69, 0x56, 0x22, 0x47, 0xbf, 0x1a, 0x50, 0x81, 0xd9, 0x19, 0x34, 0xa4, 0xe0, 0x8e, 0xeb,
	0x78, 0xcd, 0xb0, 0x21, 0x05, 0x1b, 0x40, 0x93, 0x24, 0x25, 0xc8, 0x1b, 0xae, 0xe3, 0x75, 0xc3,
	0x32, 0x60, 0x0c, 0x4e, 0x57, 0x51, 0x8a, 0xfc, 0xc4, 0x24, 0xcd, 0xbd, 0x40, 0x66, 0xb9, 0x8c,
	0x91, 0x9f, 0xba, 0x8e, 0xd7, 0x08, 0xcb, 0x80, 0xb9, 0xd0, 0x13, 0xa8, 0xe3, 0x5c, 0x66, 0x24,
	0xd5, 0x8a, 0x37, 0x4d, 0xc3, 0x7e, 0x8a, 0x5d, 0x42, 0x57, 0xea, 0xfb, 0x28, 0x26, 0xf9, 0x88,
	0xbc, 0xe5, 0x3a, 0x5e, 0x27, 0xec, 0x48, 0x3d, 0x35, 0x31, 0xbb, 0x02, 0xd0, 0xb4, 0x49, 0xa4,
	0xa6, 0x7b, 0x29, 0x78, 0xdb, 0x8c, 0xd5, 0xb5, 0x99, 0xb9, 0x60, 0x4f, 0xa1, 0x23, 0xd3, 0x68,
	0x89, 0x45, 0xb1, 0x63, 0x8a, 0x6d, 0x13, 0xcf, 0x05, 0x7b, 0x09, 0xdd, 0x2f, 0x99, 0x88, 0x08,
	0xc5, 0x94, 0x78, 0xd7, 0x75, 0xbc, 0xde, 0x78, 0xe8, 0x97, 0x4a, 0xf8, 0x95, 0x12, 0xfe, 0xe7,
	0x4a, 0x89, 0x70, 0x07, 0x2e, 0x3a, 0xdf, 0xe4, 0x68, 0x3b, 0xe1, 0xef, 0x9d, 0x5b, 0xf0, 0xe8,
	0x06, 0x98, 0xd5, 0x31, 0xc4, 0x1f, 0x6b, 0xd4, 0x74, 0xb7, 0x99, 0x8b, 0x43, 0x49, 0x47, 0xcf,
	0x60, 0x70, 0x88, 0xfa, 0x50, 0x08, 0x58, 0x89, 0xea, 0xec, 0x44, 0x1d, 0x7d, 0x85, 0xff, 0xb6,
	0x58, 0x9d, 0xa9, 0x95, 0x36, 0xb0, 0x58, 0x09, 0xb4, 0x84, 0xe6, 0xce, 0x2e, 0xa0, 0xa5, 0x29,
	0xa2, 0xb5, 0xb6, 0x36, 0xd9, 0x88, 0x71, 0x68, 0xa7, 0xa8, 0x75, 0xb4, 0xac, 0xac, 0xaa, 0xc2,
	0xd1, 0x35, 0xf4, 0x05, 0x26, 0x48, 0x68, 0x67, 0xa8, 0x4d, 0x79, 0x0b, 0x3d, 0xfb, 0xf2, 0x7b,
	0xa9, 0x89, 0xdd, 0xc0, 0x69, 0xa1, 0x39, 0x77, 0xdc, 0x13, 0xaf, 0x37, 0x3e, 0xf7, 0xf7, 0x76,
	0xcd, 0x4c, 0x67, 0xaa, 0xe3, 0x9f, 0x27, 0xf0, 0xff, 0xbb, 0x28, 0xcf, 0x37, 0x1f, 0xcb, 0xf4,
	0x27, 0xcc, 0x1f, 0x8b, 0x2d, 0x78, 0x0d, 0x67, 0x33, 0x24, 0x9b, 0x34, 0xa2, 0x5c, 0xd6, 0x18,
	0x76, 0x8a, 0x0d, 0x6b, 0xf4, 0x6c, 0x06, 0xe7, 0xfb, 0x04, 0x46, 0xaf, 0xab, 0xa3, 0x14, 0x45,
	0x79, 0x38, 0x38, 0x2c, 0x9b, 0xef, 0x78, 0x01, 0xfd, 0x19, 0xd2, 0x34, 0x49, 0x2c, 0x17, 0xab,
	0xbd, 0x55, 0x7f, 0xfd, 0xb9, 0xc3, 0x26, 0xd0, 0x2f, 0x6d, 0x3e, 0xde, 0xc6, 0xeb, 0xe3, 0x58,
	0xc7, 0x26, 0xd0, 0x2f, 0xb7, 0xeb, 0x5f, 0x9a, 0xa7, 0xd0, 0x7f, 0x6b, 0x8c, 0xaa, 0x9a, 0x2f,
	0xb6, 0xd0, 0x3f, 0x0c, 0x3c, 0x4e, 0x71, 0x37, 0xf9, 0xf6, 0x6a, 0x29, 0xe9, 0x61, 0xbd, 0xf0,
	0x63, 0x95, 0x06, 0x11, 0xa9, 0x54, 0x6f, 0x34, 0x61, 0xaa, 0x09, 0xa3, 0x34, 0x78, 0x28, 0xfc,
	0x32, 0x7b, 0x9d, 0x2a, 0x81, 0x89, 0x0e, 0xcc, 0x51, 0xfd, 0x4c, 0x16, 0x2d, 0x53, 0xba, 0xfd,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0xae, 0xb1, 0x11, 0x0e, 0x66, 0x04, 0x00, 0x00,
}
