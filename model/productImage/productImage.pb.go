// Code generated by protoc-gen-go. DO NOT EDIT.
// source: productImage/productImage.proto

/*
Package productImage is a generated protocol buffer package.

It is generated from these files:
	productImage/productImage.proto

It has these top-level messages:
	ProductImage
	ProductImageRequest
	ProductImageResponse
	DeleteProductImageRequest
	ProductImageList
*/
package productImage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProductImage struct {
	Id        int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IsActive  bool                       `protobuf:"varint,3,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=UpdatedAt" json:"UpdatedAt,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
}

func (m *ProductImage) Reset()                    { *m = ProductImage{} }
func (m *ProductImage) String() string            { return proto.CompactTextString(m) }
func (*ProductImage) ProtoMessage()               {}
func (*ProductImage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProductImage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ProductImage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductImage) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *ProductImage) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ProductImage) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type ProductImageRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ProductImageRequest) Reset()                    { *m = ProductImageRequest{} }
func (m *ProductImageRequest) String() string            { return proto.CompactTextString(m) }
func (*ProductImageRequest) ProtoMessage()               {}
func (*ProductImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProductImageRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ProductImageResponse struct {
	Code      int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	ImageName string `protobuf:"bytes,4,opt,name=image_name,json=imageName" json:"image_name,omitempty"`
}

func (m *ProductImageResponse) Reset()                    { *m = ProductImageResponse{} }
func (m *ProductImageResponse) String() string            { return proto.CompactTextString(m) }
func (*ProductImageResponse) ProtoMessage()               {}
func (*ProductImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProductImageResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ProductImageResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ProductImageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ProductImageResponse) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

type DeleteProductImageRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteProductImageRequest) Reset()                    { *m = DeleteProductImageRequest{} }
func (m *DeleteProductImageRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteProductImageRequest) ProtoMessage()               {}
func (*DeleteProductImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteProductImageRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ProductImageList struct {
	List []*ProductImage `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ProductImageList) Reset()                    { *m = ProductImageList{} }
func (m *ProductImageList) String() string            { return proto.CompactTextString(m) }
func (*ProductImageList) ProtoMessage()               {}
func (*ProductImageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProductImageList) GetList() []*ProductImage {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*ProductImage)(nil), "productImage.productImage")
	proto.RegisterType((*ProductImageRequest)(nil), "productImage.productImageRequest")
	proto.RegisterType((*ProductImageResponse)(nil), "productImage.productImageResponse")
	proto.RegisterType((*DeleteProductImageRequest)(nil), "productImage.deleteProductImageRequest")
	proto.RegisterType((*ProductImageList)(nil), "productImage.productImageList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HarryImageService service

type HarryImageServiceClient interface {
	GetProductImageById(ctx context.Context, in *ProductImageRequest, opts ...grpc.CallOption) (*ProductImage, error)
	GetAllProductImage(ctx context.Context, in *ProductImage, opts ...grpc.CallOption) (*ProductImageList, error)
	UploadProductImage(ctx context.Context, in *ProductImage, opts ...grpc.CallOption) (*ProductImageResponse, error)
	DeleteProductImage(ctx context.Context, in *DeleteProductImageRequest, opts ...grpc.CallOption) (*ProductImageResponse, error)
}

type harryImageServiceClient struct {
	cc *grpc.ClientConn
}

func NewHarryImageServiceClient(cc *grpc.ClientConn) HarryImageServiceClient {
	return &harryImageServiceClient{cc}
}

func (c *harryImageServiceClient) GetProductImageById(ctx context.Context, in *ProductImageRequest, opts ...grpc.CallOption) (*ProductImage, error) {
	out := new(ProductImage)
	err := grpc.Invoke(ctx, "/productImage.HarryImageService/GetProductImageById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryImageServiceClient) GetAllProductImage(ctx context.Context, in *ProductImage, opts ...grpc.CallOption) (*ProductImageList, error) {
	out := new(ProductImageList)
	err := grpc.Invoke(ctx, "/productImage.HarryImageService/GetAllProductImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryImageServiceClient) UploadProductImage(ctx context.Context, in *ProductImage, opts ...grpc.CallOption) (*ProductImageResponse, error) {
	out := new(ProductImageResponse)
	err := grpc.Invoke(ctx, "/productImage.HarryImageService/UploadProductImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryImageServiceClient) DeleteProductImage(ctx context.Context, in *DeleteProductImageRequest, opts ...grpc.CallOption) (*ProductImageResponse, error) {
	out := new(ProductImageResponse)
	err := grpc.Invoke(ctx, "/productImage.HarryImageService/DeleteProductImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HarryImageService service

type HarryImageServiceServer interface {
	GetProductImageById(context.Context, *ProductImageRequest) (*ProductImage, error)
	GetAllProductImage(context.Context, *ProductImage) (*ProductImageList, error)
	UploadProductImage(context.Context, *ProductImage) (*ProductImageResponse, error)
	DeleteProductImage(context.Context, *DeleteProductImageRequest) (*ProductImageResponse, error)
}

func RegisterHarryImageServiceServer(s *grpc.Server, srv HarryImageServiceServer) {
	s.RegisterService(&_HarryImageService_serviceDesc, srv)
}

func _HarryImageService_GetProductImageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryImageServiceServer).GetProductImageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productImage.HarryImageService/GetProductImageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryImageServiceServer).GetProductImageById(ctx, req.(*ProductImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryImageService_GetAllProductImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryImageServiceServer).GetAllProductImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productImage.HarryImageService/GetAllProductImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryImageServiceServer).GetAllProductImage(ctx, req.(*ProductImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryImageService_UploadProductImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryImageServiceServer).UploadProductImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productImage.HarryImageService/UploadProductImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryImageServiceServer).UploadProductImage(ctx, req.(*ProductImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryImageService_DeleteProductImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryImageServiceServer).DeleteProductImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productImage.HarryImageService/DeleteProductImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryImageServiceServer).DeleteProductImage(ctx, req.(*DeleteProductImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HarryImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "productImage.HarryImageService",
	HandlerType: (*HarryImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductImageById",
			Handler:    _HarryImageService_GetProductImageById_Handler,
		},
		{
			MethodName: "GetAllProductImage",
			Handler:    _HarryImageService_GetAllProductImage_Handler,
		},
		{
			MethodName: "UploadProductImage",
			Handler:    _HarryImageService_UploadProductImage_Handler,
		},
		{
			MethodName: "DeleteProductImage",
			Handler:    _HarryImageService_DeleteProductImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "productImage/productImage.proto",
}

func init() { proto.RegisterFile("productImage/productImage.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x51, 0x6b, 0xd4, 0x40,
	0x10, 0x26, 0xd7, 0x6b, 0x6d, 0x46, 0x11, 0x9d, 0x8a, 0xc4, 0x13, 0x6d, 0x0c, 0x88, 0x07, 0x42,
	0x02, 0xf5, 0xc5, 0x27, 0xf1, 0x4e, 0xa1, 0x16, 0x44, 0x4a, 0xbc, 0xbe, 0xf8, 0x52, 0xf6, 0xb2,
	0x63, 0xba, 0x90, 0xed, 0xc6, 0xec, 0xa4, 0x70, 0xf8, 0xf3, 0xfc, 0x4b, 0xfe, 0x00, 0xb9, 0x4d,
	0xce, 0x26, 0x95, 0xc6, 0x7b, 0xba, 0x9d, 0x99, 0xef, 0x9b, 0xfd, 0xbe, 0xfd, 0x2e, 0x70, 0x58,
	0x56, 0x46, 0xd6, 0x19, 0x9f, 0x68, 0x91, 0x53, 0xd2, 0x2d, 0xe2, 0xb2, 0x32, 0x6c, 0xf0, 0x5e,
	0xb7, 0x37, 0x39, 0xcc, 0x8d, 0xc9, 0x0b, 0x07, 0x64, 0xb3, 0xac, 0xbf, 0x27, 0xac, 0x34, 0x59,
	0x16, 0xba, 0x6c, 0xe0, 0xd1, 0x2f, 0x0f, 0x7a, 0x0c, 0xbc, 0x0f, 0x23, 0x25, 0x03, 0x2f, 0xf4,
	0xa6, 0xbb, 0xe9, 0x48, 0x49, 0x44, 0x18, 0x5f, 0x0a, 0x4d, 0xc1, 0x28, 0xf4, 0xa6, 0x7e, 0xea,
	0xce, 0xf8, 0x14, 0x7c, 0x65, 0xcf, 0x45, 0xc6, 0xea, 0x8a, 0x82, 0x9d, 0xd0, 0x9b, 0xee, 0xa7,
	0xfb, 0xca, 0xce, 0x5c, 0x8d, 0x6f, 0xc1, 0x3f, 0x2b, 0xa5, 0x60, 0x92, 0x33, 0x0e, 0xc6, 0xa1,
	0x37, 0xbd, 0x7b, 0x34, 0x89, 0x1b, 0x19, 0xf1, 0x46, 0x46, 0xbc, 0xd8, 0xc8, 0x48, 0xaf, 0xc1,
	0x6b, 0xe6, 0x87, 0x8a, 0x5a, 0xe6, 0xee, 0xff, 0x99, 0x7f, 0xc1, 0xd1, 0x4b, 0x38, 0xe8, 0x9a,
	0x48, 0xe9, 0x47, 0x4d, 0x96, 0x6f, 0x7a, 0x89, 0x7e, 0xc2, 0xa3, 0x3e, 0xcc, 0x96, 0xe6, 0xd2,
	0xd2, 0xda, 0x63, 0x66, 0x24, 0xb5, 0x48, 0x77, 0xc6, 0xc7, 0xb0, 0x67, 0x59, 0x70, 0x6d, 0x5b,
	0xe7, 0x6d, 0x85, 0x01, 0xdc, 0xd1, 0x64, 0xad, 0xc8, 0x1b, 0xe7, 0x7e, 0xba, 0x29, 0xf1, 0x19,
	0x80, 0x5a, 0xaf, 0x3d, 0x77, 0xef, 0x35, 0x76, 0x43, 0xdf, 0x75, 0xbe, 0x08, 0x4d, 0xd1, 0x6b,
	0x78, 0x22, 0xa9, 0x20, 0xa6, 0xd3, 0x2d, 0x94, 0xce, 0xe1, 0x41, 0x57, 0xe9, 0x67, 0x65, 0x19,
	0x63, 0x18, 0x17, 0xca, 0x72, 0xe0, 0x85, 0x3b, 0xee, 0x65, 0x6e, 0x86, 0x7f, 0xbd, 0xd4, 0xe1,
	0x8e, 0x7e, 0x8f, 0xe0, 0xe1, 0x27, 0x51, 0x55, 0x2b, 0xd7, 0xfc, 0x4a, 0xd5, 0x95, 0xca, 0x08,
	0x17, 0x70, 0x70, 0x4c, 0xdc, 0xd5, 0x30, 0x5f, 0x9d, 0x48, 0x7c, 0x31, 0xb0, 0xae, 0xd1, 0x38,
	0x19, 0xb8, 0x11, 0x4f, 0x01, 0x8f, 0x89, 0x67, 0x45, 0xd1, 0x5d, 0x8c, 0x03, 0x8c, 0xc9, 0xf3,
	0xdb, 0x67, 0xce, 0xed, 0x02, 0xf0, 0xac, 0x2c, 0x8c, 0x90, 0x5b, 0x6f, 0x8c, 0x86, 0x2c, 0xb4,
	0x49, 0x0b, 0xc0, 0x8f, 0xff, 0x84, 0x80, 0xaf, 0xfa, 0xcc, 0x5b, 0x63, 0xda, 0xe6, 0x8a, 0xf9,
	0xfb, 0x6f, 0xef, 0x72, 0xc5, 0x17, 0xf5, 0x32, 0xce, 0x8c, 0x4e, 0x04, 0x1b, 0x6d, 0x57, 0x96,
	0x49, 0x5b, 0x26, 0xa1, 0x93, 0x8b, 0x75, 0x20, 0xee, 0xcf, 0xac, 0x8d, 0xa4, 0xc2, 0x26, 0xee,
	0xa7, 0xf7, 0x21, 0x2f, 0xf7, 0xdc, 0xfc, 0xcd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xf8,
	0xb7, 0xd8, 0xec, 0x03, 0x00, 0x00,
}
