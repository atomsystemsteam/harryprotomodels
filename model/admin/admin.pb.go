// Code generated by protoc-gen-go. DO NOT EDIT.
// source: admin.proto

/*
Package admin is a generated protocol buffer package.

It is generated from these files:
	admin.proto

It has these top-level messages:
	Admin
	Role
	Request
	LoginRequest
	LoginResponse
	DeleteResponse
*/
package admin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Admin struct {
	Id        int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FirstName string                     `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string                     `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Email     string                     `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Phone     string                     `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`
	Password  string                     `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	AdminType string                     `protobuf:"bytes,7,opt,name=admin_type,json=adminType" json:"admin_type,omitempty"`
	IsActive  bool                       `protobuf:"varint,8,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	IsDeleted bool                       `protobuf:"varint,9,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=UpdatedAt" json:"UpdatedAt,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
	Roles     []*Role                    `protobuf:"bytes,12,rep,name=roles" json:"roles,omitempty"`
}

func (m *Admin) Reset()                    { *m = Admin{} }
func (m *Admin) String() string            { return proto.CompactTextString(m) }
func (*Admin) ProtoMessage()               {}
func (*Admin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Admin) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Admin) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Admin) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Admin) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Admin) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Admin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Admin) GetAdminType() string {
	if m != nil {
		return m.AdminType
	}
	return ""
}

func (m *Admin) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Admin) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Admin) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Admin) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Admin) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type Role struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RoleName string `protobuf:"bytes,2,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Role) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Role) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

type Request struct {
	Id        int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Request) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

type LoginRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Status  string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Token   string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LoginResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LoginResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type DeleteResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Code   int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DeleteResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*Admin)(nil), "admin.admin")
	proto.RegisterType((*Role)(nil), "admin.role")
	proto.RegisterType((*Request)(nil), "admin.request")
	proto.RegisterType((*LoginRequest)(nil), "admin.loginRequest")
	proto.RegisterType((*LoginResponse)(nil), "admin.loginResponse")
	proto.RegisterType((*DeleteResponse)(nil), "admin.deleteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HarryAdminService service

type HarryAdminServiceClient interface {
	GetAdmin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Admin, error)
	GetAllAdmin(ctx context.Context, in *Request, opts ...grpc.CallOption) (HarryAdminService_GetAllAdminClient, error)
	CreateAdmin(ctx context.Context, in *Admin, opts ...grpc.CallOption) (*Admin, error)
	UpdateAdmin(ctx context.Context, in *Admin, opts ...grpc.CallOption) (*Admin, error)
	DeleteAdmin(ctx context.Context, in *Admin, opts ...grpc.CallOption) (*DeleteResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type harryAdminServiceClient struct {
	cc *grpc.ClientConn
}

func NewHarryAdminServiceClient(cc *grpc.ClientConn) HarryAdminServiceClient {
	return &harryAdminServiceClient{cc}
}

func (c *harryAdminServiceClient) GetAdmin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Admin, error) {
	out := new(Admin)
	err := grpc.Invoke(ctx, "/admin.HarryAdminService/GetAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryAdminServiceClient) GetAllAdmin(ctx context.Context, in *Request, opts ...grpc.CallOption) (HarryAdminService_GetAllAdminClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HarryAdminService_serviceDesc.Streams[0], c.cc, "/admin.HarryAdminService/GetAllAdmin", opts...)
	if err != nil {
		return nil, err
	}
	x := &harryAdminServiceGetAllAdminClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HarryAdminService_GetAllAdminClient interface {
	Recv() (*Admin, error)
	grpc.ClientStream
}

type harryAdminServiceGetAllAdminClient struct {
	grpc.ClientStream
}

func (x *harryAdminServiceGetAllAdminClient) Recv() (*Admin, error) {
	m := new(Admin)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *harryAdminServiceClient) CreateAdmin(ctx context.Context, in *Admin, opts ...grpc.CallOption) (*Admin, error) {
	out := new(Admin)
	err := grpc.Invoke(ctx, "/admin.HarryAdminService/CreateAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryAdminServiceClient) UpdateAdmin(ctx context.Context, in *Admin, opts ...grpc.CallOption) (*Admin, error) {
	out := new(Admin)
	err := grpc.Invoke(ctx, "/admin.HarryAdminService/UpdateAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryAdminServiceClient) DeleteAdmin(ctx context.Context, in *Admin, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/admin.HarryAdminService/DeleteAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harryAdminServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/admin.HarryAdminService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HarryAdminService service

type HarryAdminServiceServer interface {
	GetAdmin(context.Context, *Request) (*Admin, error)
	GetAllAdmin(*Request, HarryAdminService_GetAllAdminServer) error
	CreateAdmin(context.Context, *Admin) (*Admin, error)
	UpdateAdmin(context.Context, *Admin) (*Admin, error)
	DeleteAdmin(context.Context, *Admin) (*DeleteResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
}

func RegisterHarryAdminServiceServer(s *grpc.Server, srv HarryAdminServiceServer) {
	s.RegisterService(&_HarryAdminService_serviceDesc, srv)
}

func _HarryAdminService_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryAdminServiceServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.HarryAdminService/GetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryAdminServiceServer).GetAdmin(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryAdminService_GetAllAdmin_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HarryAdminServiceServer).GetAllAdmin(m, &harryAdminServiceGetAllAdminServer{stream})
}

type HarryAdminService_GetAllAdminServer interface {
	Send(*Admin) error
	grpc.ServerStream
}

type harryAdminServiceGetAllAdminServer struct {
	grpc.ServerStream
}

func (x *harryAdminServiceGetAllAdminServer) Send(m *Admin) error {
	return x.ServerStream.SendMsg(m)
}

func _HarryAdminService_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Admin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryAdminServiceServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.HarryAdminService/CreateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryAdminServiceServer).CreateAdmin(ctx, req.(*Admin))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryAdminService_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Admin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryAdminServiceServer).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.HarryAdminService/UpdateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryAdminServiceServer).UpdateAdmin(ctx, req.(*Admin))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryAdminService_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Admin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryAdminServiceServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.HarryAdminService/DeleteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryAdminServiceServer).DeleteAdmin(ctx, req.(*Admin))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarryAdminService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarryAdminServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.HarryAdminService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarryAdminServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HarryAdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.HarryAdminService",
	HandlerType: (*HarryAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdmin",
			Handler:    _HarryAdminService_GetAdmin_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _HarryAdminService_CreateAdmin_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _HarryAdminService_UpdateAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _HarryAdminService_DeleteAdmin_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _HarryAdminService_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllAdmin",
			Handler:       _HarryAdminService_GetAllAdmin_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}

func init() { proto.RegisterFile("admin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xd3, 0x38, 0xb1, 0xc7, 0xa1, 0x12, 0x4b, 0x41, 0xab, 0x54, 0x08, 0xe3, 0x93, 0x7b,
	0xc0, 0x45, 0xee, 0xa5, 0x07, 0x0e, 0x44, 0x20, 0xc1, 0x01, 0x71, 0x30, 0xe5, 0x1c, 0x6d, 0xe3,
	0x69, 0x58, 0xd5, 0xf6, 0x1a, 0xef, 0xa6, 0x28, 0x0f, 0xc1, 0x8b, 0xf0, 0x94, 0x68, 0x77, 0xec,
	0x92, 0x14, 0xa4, 0x02, 0x37, 0x7f, 0x3f, 0x33, 0x1e, 0xcd, 0x37, 0x0b, 0x91, 0x28, 0x6b, 0xd9,
	0x64, 0x6d, 0xa7, 0x8c, 0x62, 0xbe, 0x03, 0xf3, 0x67, 0x6b, 0xa5, 0xd6, 0x15, 0x9e, 0x3a, 0xf2,
	0x72, 0x73, 0x75, 0x6a, 0x64, 0x8d, 0xda, 0x88, 0xba, 0x25, 0x5f, 0xf2, 0xfd, 0x00, 0xc8, 0xca,
	0x0e, 0x61, 0x24, 0x4b, 0xee, 0xc5, 0x5e, 0xea, 0x17, 0x23, 0x59, 0xb2, 0xa7, 0x00, 0x57, 0xb2,
	0xd3, 0x66, 0xd9, 0x88, 0x1a, 0xf9, 0x28, 0xf6, 0xd2, 0xb0, 0x08, 0x1d, 0xf3, 0x51, 0xd4, 0xc8,
	0x8e, 0x21, 0xac, 0xc4, 0xa0, 0x1e, 0x38, 0x35, 0xb0, 0x84, 0x13, 0x8f, 0xc0, 0xc7, 0x5a, 0xc8,
	0x8a, 0x8f, 0x9d, 0x40, 0xc0, 0xb2, 0xed, 0x17, 0xd5, 0x20, 0xf7, 0x89, 0x75, 0x80, 0xcd, 0x21,
	0x68, 0x85, 0xd6, 0xdf, 0x54, 0x57, 0xf2, 0x09, 0xf5, 0x19, 0xb0, 0x9d, 0xc1, 0x0d, 0xb7, 0x34,
	0xdb, 0x16, 0xf9, 0x94, 0x66, 0x70, 0xcc, 0xc5, 0xb6, 0x75, 0x33, 0x48, 0xbd, 0x14, 0x2b, 0x23,
	0x6f, 0x90, 0x07, 0xb1, 0x97, 0x06, 0x45, 0x20, 0xf5, 0xc2, 0x61, 0x5b, 0x2b, 0xf5, 0xb2, 0xc4,
	0x0a, 0x0d, 0x96, 0x3c, 0x74, 0x6a, 0x28, 0xf5, 0x5b, 0x22, 0xd8, 0x39, 0x84, 0x9f, 0xdb, 0x52,
	0x18, 0x2c, 0x17, 0x86, 0x43, 0xec, 0xa5, 0x51, 0x3e, 0xcf, 0x68, 0x5b, 0xd9, 0xb0, 0xad, 0xec,
	0x62, 0xd8, 0x56, 0xf1, 0xcb, 0x6c, 0x2b, 0xdf, 0x74, 0xd8, 0x57, 0x46, 0xf7, 0x57, 0xde, 0x9a,
	0xd9, 0x73, 0xf0, 0x3b, 0x55, 0xa1, 0xe6, 0xb3, 0xf8, 0x20, 0x8d, 0xf2, 0x28, 0xa3, 0xc4, 0x2c,
	0x57, 0x90, 0x92, 0x9c, 0xc1, 0xd8, 0x7e, 0xfc, 0x96, 0xc6, 0x31, 0x84, 0x96, 0xdf, 0x0d, 0x23,
	0xb0, 0x84, 0x5d, 0x77, 0x72, 0x0e, 0xd3, 0x0e, 0xbf, 0x6e, 0x50, 0x9b, 0x7f, 0x4c, 0x31, 0x79,
	0x0d, 0xb3, 0x4a, 0xad, 0x65, 0x53, 0xf4, 0xe5, 0xb7, 0xc1, 0x79, 0xbb, 0xc1, 0xed, 0x46, 0x34,
	0xda, 0x8f, 0x28, 0xb9, 0x86, 0x07, 0x7d, 0x07, 0xdd, 0xaa, 0x46, 0x23, 0x7b, 0x02, 0x13, 0x6d,
	0x84, 0xd9, 0xe8, 0xbe, 0x47, 0x8f, 0x18, 0x83, 0xf1, 0x4a, 0x95, 0x34, 0x83, 0x5f, 0xb8, 0x6f,
	0xc6, 0x61, 0x5a, 0xa3, 0xd6, 0x62, 0x3d, 0x9c, 0xd0, 0x00, 0xed, 0x20, 0x46, 0x5d, 0x63, 0x33,
	0x5c, 0x90, 0x03, 0xc9, 0x2b, 0x38, 0xa4, 0x40, 0xff, 0xe7, 0x6f, 0xf9, 0x8f, 0x11, 0x3c, 0x7c,
	0x2f, 0xba, 0x6e, 0xbb, 0xb0, 0x6b, 0xff, 0x84, 0xdd, 0x8d, 0x5c, 0x21, 0x4b, 0x21, 0x78, 0x87,
	0x66, 0x41, 0x6f, 0x60, 0x48, 0x84, 0xd6, 0x31, 0x9f, 0xf5, 0x98, 0x5e, 0xc8, 0x0b, 0x88, 0xac,
	0xb3, 0xaa, 0xfe, 0xc2, 0xfc, 0xd2, 0x63, 0x27, 0x10, 0x51, 0xf4, 0x64, 0xdf, 0x93, 0xef, 0x74,
	0x3e, 0x81, 0x88, 0xee, 0xeb, 0x7e, 0x6b, 0x0e, 0x11, 0x9d, 0xf0, 0x9f, 0xac, 0x8f, 0x7b, 0x74,
	0x67, 0x49, 0x39, 0xf8, 0x1f, 0x6c, 0x46, 0xec, 0x51, 0xaf, 0xef, 0x66, 0x3e, 0x3f, 0xda, 0x27,
	0xa9, 0xe6, 0x72, 0xe2, 0x4e, 0xf9, 0xec, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x53, 0x12,
	0x9d, 0x56, 0x04, 0x00, 0x00,
}
