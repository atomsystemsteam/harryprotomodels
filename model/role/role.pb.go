// Code generated by protoc-gen-go. DO NOT EDIT.
// source: role/role.proto

package role

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role struct {
	Id                   int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoleName             string               `protobuf:"bytes,2,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	IsActive             bool                 `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsDeleted            bool                 `protobuf:"varint,4,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Role) Reset()         { *m = Role{} }
func (m *Role) String() string { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()    {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb80865a74c2c62, []int{0}
}

func (m *Role) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Role.Unmarshal(m, b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Role.Marshal(b, m, deterministic)
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return xxx_messageInfo_Role.Size(m)
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Role) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *Role) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Role) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Role) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Role) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Request struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoleName             string   `protobuf:"bytes,2,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb80865a74c2c62, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

type Response struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb80865a74c2c62, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*Role)(nil), "role.Role")
	proto.RegisterType((*Request)(nil), "role.request")
	proto.RegisterType((*Response)(nil), "role.response")
}

func init() { proto.RegisterFile("role/role.proto", fileDescriptor_ccb80865a74c2c62) }

var fileDescriptor_ccb80865a74c2c62 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x5d, 0x6b, 0xdb, 0x30,
	0x14, 0x45, 0x99, 0x93, 0xd8, 0x77, 0x2c, 0x1b, 0x7a, 0x18, 0x26, 0x63, 0xcc, 0x84, 0xc0, 0xfc,
	0x64, 0x8f, 0x0c, 0x42, 0x5e, 0xb3, 0x15, 0xfa, 0xd6, 0x07, 0xb7, 0x7d, 0xe9, 0x4b, 0x50, 0xac,
	0xdb, 0x44, 0x60, 0x45, 0xae, 0x24, 0x07, 0xf2, 0x4b, 0xfb, 0x03, 0xfa, 0x47, 0x8a, 0x25, 0xa7,
	0x1f, 0x14, 0x52, 0xfa, 0x62, 0xeb, 0xde, 0x73, 0x8e, 0x38, 0xf7, 0x5c, 0xc1, 0x57, 0xad, 0x2a,
	0xcc, 0xdb, 0x4f, 0x56, 0x6b, 0x65, 0x15, 0x0d, 0xda, 0xf3, 0xf8, 0xd7, 0x46, 0xa9, 0x4d, 0x85,
	0xb9, 0xeb, 0xad, 0x9b, 0xdb, 0xdc, 0x0a, 0x89, 0xc6, 0x32, 0x59, 0x7b, 0xda, 0xe4, 0x81, 0x40,
	0x50, 0xa8, 0x0a, 0xe9, 0x08, 0x7a, 0x82, 0xc7, 0x24, 0x21, 0x69, 0xbf, 0xe8, 0x09, 0x4e, 0x7f,
	0x40, 0xd4, 0xde, 0xb0, 0xda, 0x31, 0x89, 0x71, 0x2f, 0x21, 0x69, 0x54, 0x84, 0x6d, 0xe3, 0x82,
	0x49, 0x6c, 0x41, 0x61, 0x56, 0xac, 0xb4, 0x62, 0x8f, 0xf1, 0xa7, 0x84, 0xa4, 0x61, 0x11, 0x0a,
	0xb3, 0x74, 0x35, 0xfd, 0x09, 0x20, 0xcc, 0x8a, 0x63, 0x85, 0x16, 0x79, 0x1c, 0x38, 0x34, 0x12,
	0xe6, 0xcc, 0x37, 0xe8, 0x02, 0xa2, 0xeb, 0x9a, 0x33, 0x8b, 0x7c, 0x69, 0xe3, 0x7e, 0x42, 0xd2,
	0xcf, 0xb3, 0x71, 0xe6, 0x6d, 0x66, 0x47, 0x9b, 0xd9, 0xd5, 0xd1, 0x66, 0xf1, 0x4c, 0x6e, 0x95,
	0xff, 0x35, 0x76, 0xca, 0xc1, 0xfb, 0xca, 0x27, 0xf2, 0x64, 0x0e, 0x43, 0x8d, 0x77, 0x0d, 0x1a,
	0xfb, 0xa1, 0x39, 0x27, 0x73, 0x08, 0x35, 0x9a, 0x5a, 0xed, 0x0c, 0xd2, 0xef, 0x30, 0x30, 0x96,
	0xd9, 0xc6, 0x38, 0x71, 0x54, 0x74, 0x15, 0xa5, 0x10, 0x94, 0x8a, 0x7b, 0x6d, 0xbf, 0x70, 0xe7,
	0xd9, 0x3d, 0x81, 0x6f, 0x4b, 0x2e, 0xc5, 0xae, 0x8d, 0xf6, 0x12, 0xf5, 0x5e, 0x94, 0x48, 0xa7,
	0x30, 0x3c, 0x47, 0xeb, 0xc2, 0xfe, 0x92, 0xb9, 0x4d, 0x75, 0x9e, 0xc6, 0xe0, 0x4b, 0x07, 0xfd,
	0x86, 0xb0, 0x63, 0x99, 0x13, 0xb4, 0x3f, 0x84, 0x4e, 0x01, 0xfc, 0x80, 0x4e, 0xf6, 0x02, 0x7b,
	0x75, 0xdd, 0x14, 0xc0, 0x07, 0x78, 0x92, 0x95, 0x02, 0xf8, 0xf5, 0xbc, 0x61, 0x8d, 0x8e, 0x16,
	0x7c, 0x0a, 0xff, 0x16, 0x37, 0xf3, 0x8d, 0xb0, 0xdb, 0x66, 0x9d, 0x95, 0x4a, 0xe6, 0xcc, 0x2a,
	0x69, 0x0e, 0xc6, 0xa2, 0x34, 0x16, 0x99, 0xcc, 0xb7, 0x4c, 0xeb, 0x83, 0x5b, 0x85, 0x54, 0x1c,
	0x2b, 0x93, 0xbb, 0x9f, 0x7b, 0x96, 0xeb, 0x81, 0xeb, 0xff, 0x7d, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x5f, 0x73, 0xe4, 0x36, 0xaa, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminRoleServiceClient is the client API for AdminRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminRoleServiceClient interface {
	GetRole(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Role, error)
	GetRoles(ctx context.Context, in *Request, opts ...grpc.CallOption) (AdminRoleService_GetRolesClient, error)
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	DeleteRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error)
}

type adminRoleServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminRoleServiceClient(cc *grpc.ClientConn) AdminRoleServiceClient {
	return &adminRoleServiceClient{cc}
}

func (c *adminRoleServiceClient) GetRole(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/role.AdminRoleService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRoleServiceClient) GetRoles(ctx context.Context, in *Request, opts ...grpc.CallOption) (AdminRoleService_GetRolesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdminRoleService_serviceDesc.Streams[0], "/role.AdminRoleService/GetRoles", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminRoleServiceGetRolesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminRoleService_GetRolesClient interface {
	Recv() (*Role, error)
	grpc.ClientStream
}

type adminRoleServiceGetRolesClient struct {
	grpc.ClientStream
}

func (x *adminRoleServiceGetRolesClient) Recv() (*Role, error) {
	m := new(Role)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminRoleServiceClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/role.AdminRoleService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRoleServiceClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/role.AdminRoleService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRoleServiceClient) DeleteRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/role.AdminRoleService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminRoleServiceServer is the server API for AdminRoleService service.
type AdminRoleServiceServer interface {
	GetRole(context.Context, *Request) (*Role, error)
	GetRoles(*Request, AdminRoleService_GetRolesServer) error
	CreateRole(context.Context, *Role) (*Role, error)
	UpdateRole(context.Context, *Role) (*Role, error)
	DeleteRole(context.Context, *Role) (*Response, error)
}

func RegisterAdminRoleServiceServer(s *grpc.Server, srv AdminRoleServiceServer) {
	s.RegisterService(&_AdminRoleService_serviceDesc, srv)
}

func _AdminRoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.AdminRoleService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRoleServiceServer).GetRole(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRoleService_GetRoles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminRoleServiceServer).GetRoles(m, &adminRoleServiceGetRolesServer{stream})
}

type AdminRoleService_GetRolesServer interface {
	Send(*Role) error
	grpc.ServerStream
}

type adminRoleServiceGetRolesServer struct {
	grpc.ServerStream
}

func (x *adminRoleServiceGetRolesServer) Send(m *Role) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminRoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.AdminRoleService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRoleServiceServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.AdminRoleService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRoleServiceServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.AdminRoleService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRoleServiceServer).DeleteRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminRoleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "role.AdminRoleService",
	HandlerType: (*AdminRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _AdminRoleService_GetRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AdminRoleService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AdminRoleService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AdminRoleService_DeleteRole_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRoles",
			Handler:       _AdminRoleService_GetRoles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "role/role.proto",
}
