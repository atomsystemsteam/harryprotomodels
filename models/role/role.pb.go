// Code generated by protoc-gen-go. DO NOT EDIT.
// source: role.proto

/*
Package role is a generated protocol buffer package.

It is generated from these files:
	role.proto

It has these top-level messages:
	Role
	Request
	Response
*/
package role

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role struct {
	Id        int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RoleName  string                     `protobuf:"bytes,2,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	IsActive  bool                       `protobuf:"varint,3,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	IsDeleted bool                       `protobuf:"varint,4,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt" json:"UpdatedAt,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Role) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Role) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *Role) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Role) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Role) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Role) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Request struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RoleName string `protobuf:"bytes,2,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

type Response struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Code   int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*Role)(nil), "role.role")
	proto.RegisterType((*Request)(nil), "role.request")
	proto.RegisterType((*Response)(nil), "role.response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AdminRoleService service

type AdminRoleServiceClient interface {
	GetRole(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Role, error)
	GetRoles(ctx context.Context, in *Request, opts ...grpc.CallOption) (AdminRoleService_GetRolesClient, error)
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	DeleteRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error)
}

type adminRoleServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminRoleServiceClient(cc *grpc.ClientConn) AdminRoleServiceClient {
	return &adminRoleServiceClient{cc}
}

func (c *adminRoleServiceClient) GetRole(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/role.AdminRoleService/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRoleServiceClient) GetRoles(ctx context.Context, in *Request, opts ...grpc.CallOption) (AdminRoleService_GetRolesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AdminRoleService_serviceDesc.Streams[0], c.cc, "/role.AdminRoleService/GetRoles", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminRoleServiceGetRolesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminRoleService_GetRolesClient interface {
	Recv() (*Role, error)
	grpc.ClientStream
}

type adminRoleServiceGetRolesClient struct {
	grpc.ClientStream
}

func (x *adminRoleServiceGetRolesClient) Recv() (*Role, error) {
	m := new(Role)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminRoleServiceClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/role.AdminRoleService/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRoleServiceClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/role.AdminRoleService/UpdateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRoleServiceClient) DeleteRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/role.AdminRoleService/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminRoleService service

type AdminRoleServiceServer interface {
	GetRole(context.Context, *Request) (*Role, error)
	GetRoles(*Request, AdminRoleService_GetRolesServer) error
	CreateRole(context.Context, *Role) (*Role, error)
	UpdateRole(context.Context, *Role) (*Role, error)
	DeleteRole(context.Context, *Role) (*Response, error)
}

func RegisterAdminRoleServiceServer(s *grpc.Server, srv AdminRoleServiceServer) {
	s.RegisterService(&_AdminRoleService_serviceDesc, srv)
}

func _AdminRoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.AdminRoleService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRoleServiceServer).GetRole(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRoleService_GetRoles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminRoleServiceServer).GetRoles(m, &adminRoleServiceGetRolesServer{stream})
}

type AdminRoleService_GetRolesServer interface {
	Send(*Role) error
	grpc.ServerStream
}

type adminRoleServiceGetRolesServer struct {
	grpc.ServerStream
}

func (x *adminRoleServiceGetRolesServer) Send(m *Role) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminRoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.AdminRoleService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRoleServiceServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.AdminRoleService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRoleServiceServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.AdminRoleService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRoleServiceServer).DeleteRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminRoleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "role.AdminRoleService",
	HandlerType: (*AdminRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _AdminRoleService_GetRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AdminRoleService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AdminRoleService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AdminRoleService_DeleteRole_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRoles",
			Handler:       _AdminRoleService_GetRoles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "role.proto",
}

func init() { proto.RegisterFile("role.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcd, 0x4a, 0x3b, 0x31,
	0x14, 0xc5, 0x49, 0xff, 0xfd, 0x98, 0xb9, 0x7f, 0x2c, 0x92, 0x85, 0x0c, 0x15, 0x71, 0x28, 0x05,
	0x67, 0x35, 0x95, 0x0a, 0xc5, 0x6d, 0x51, 0x70, 0xe7, 0x22, 0xea, 0xba, 0xa4, 0xcd, 0xb5, 0x04,
	0x66, 0x26, 0x63, 0x92, 0xe9, 0xab, 0xfa, 0x00, 0xbe, 0x88, 0x24, 0x99, 0xf1, 0x03, 0xa1, 0xe2,
	0x2e, 0xf7, 0x9c, 0xdf, 0x09, 0x27, 0x37, 0x00, 0x5a, 0x15, 0x98, 0xd7, 0x5a, 0x59, 0x45, 0xfb,
	0xee, 0x3c, 0x39, 0xdf, 0x29, 0xb5, 0x2b, 0x70, 0xee, 0xb5, 0x4d, 0xf3, 0x3c, 0xb7, 0xb2, 0x44,
	0x63, 0x79, 0x59, 0x07, 0x6c, 0xfa, 0x46, 0xc0, 0x93, 0x74, 0x0c, 0x3d, 0x29, 0x12, 0x92, 0x92,
	0x6c, 0xc0, 0x7a, 0x52, 0xd0, 0x53, 0x88, 0x9d, 0xbe, 0xae, 0x78, 0x89, 0x49, 0x2f, 0x25, 0x59,
	0xcc, 0x22, 0x27, 0xdc, 0xf3, 0x12, 0x9d, 0x29, 0xcd, 0x9a, 0x6f, 0xad, 0xdc, 0x63, 0xf2, 0x2f,
	0x25, 0x59, 0xc4, 0x22, 0x69, 0x56, 0x7e, 0xa6, 0x67, 0x00, 0xd2, 0xac, 0x05, 0x16, 0x68, 0x51,
	0x24, 0x7d, 0xef, 0xc6, 0xd2, 0xdc, 0x06, 0x81, 0x5e, 0x43, 0xfc, 0x54, 0x0b, 0x6e, 0x51, 0xac,
	0x6c, 0x32, 0x48, 0x49, 0xf6, 0x7f, 0x31, 0xc9, 0x43, 0xcd, 0xbc, 0xab, 0x99, 0x3f, 0x76, 0x35,
	0xd9, 0x27, 0xec, 0x92, 0x37, 0x1a, 0xdb, 0xe4, 0xf0, 0xf7, 0xe4, 0x07, 0x3c, 0x5d, 0xc2, 0x48,
	0xe3, 0x4b, 0x83, 0xc6, 0xfe, 0xe9, 0x9d, 0xd3, 0x25, 0x44, 0x1a, 0x4d, 0xad, 0x2a, 0x83, 0xf4,
	0x04, 0x86, 0xc6, 0x72, 0xdb, 0x18, 0x1f, 0x8e, 0x59, 0x3b, 0x51, 0x0a, 0xfd, 0xad, 0x12, 0x21,
	0x3b, 0x60, 0xfe, 0xbc, 0x78, 0x25, 0x70, 0xbc, 0x12, 0xa5, 0xac, 0x98, 0x2a, 0xf0, 0x01, 0xf5,
	0x5e, 0x6e, 0x91, 0xce, 0x60, 0x74, 0x87, 0xd6, 0x29, 0xf4, 0x28, 0xf7, 0x3f, 0xd5, 0x76, 0x9a,
	0x40, 0x3b, 0x3a, 0xeb, 0x02, 0xa2, 0x96, 0x32, 0x07, 0xb0, 0x4b, 0x42, 0x67, 0x00, 0xe1, 0x81,
	0xfe, 0xc6, 0x2f, 0xde, 0xb7, 0xeb, 0x66, 0x00, 0x61, 0x81, 0x07, 0xa9, 0x0c, 0x20, 0x7c, 0xcf,
	0x0f, 0x6a, 0xdc, 0x55, 0x08, 0x5b, 0xd8, 0x0c, 0xfd, 0xa2, 0xaf, 0xde, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x4e, 0x69, 0x6a, 0x0a, 0x6b, 0x02, 0x00, 0x00,
}
